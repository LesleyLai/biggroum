# Read the cluster_info files generated by the clusters
#

import re


class PatternInfo(object):
    def __init__(self, pattern_id, pattern_type, pattern_frequency,
                 groum_list, dot_filename):
        self.id = pattern_id
        self.type = pattern_type
        self.frequency = pattern_frequency
        self.groum_files_list = groum_list
        self.dot_name = dot_filename



def parseInfoFile(cluster_info_stream):
    """ Parse the cluster_n_info.txt file to get a list of pattern info objects
    """
    patterns = []

    groum_list= []
    pattern_type = 1
    pattern_id = -1
    pattern_frequency = -1
    dot_filename = None

    match_bin = re.compile('(\w+)\s*Bin\s*#\s*(\d+)')
    match_dot = re.compile('Dot:\s*(.*.dot)')
    match_frequency_1 = re.compile('Frequency\s*:\s*(\d+),\s*(\d+)')
    match_frequency_2 = re.compile('Frequency\s*:\s*(\d+)(.*)$')
    match_groum = re.compile('(.*)\.acdfg\.bin')

    for line in cluster_n_info:
        line = line.strip()

        m = match_bin.match(line)
        if m:
            if (pattern_id >= 0):
                pattern = PatternInfo(pattern_id,
                                      pattern_type,
                                      pattern_frequency,
                                      groum_list
                                      dot_filename)
                patterns.append(pattern)

            groum_list= []
            pattern_type = 1
            pattern_id = -1
            pattern_frequency = -1
            dot_filename = None

            pattern_type = m.group(1).lower()
            pattern_id = m.group(2)
            continue

        m = match_dot.match(line)
        if m:
            dot_file_name = m.group(1)
            continue


        m = match_frequency_1.match(line)
        if m:
            pattern_frequency = str(int(m.group(1)) + int(m.group(2)))
            continue

        # version with filename after frequency
        m = match_frequency_2.match(line)
        if m:
            pattern_frequency = m.group(1)
            groum_list.append(m.group(2))
            continue

       m = match_groum.match(line)
       if m:
           groum_list.append(line)
           continue

    if (pattern_id >= 0):
        pattern = PatternInfo(pattern_id,
                              pattern_type,
                              pattern_frequency,
                              groum_list
                              dot_filename)
        patterns.append(pattern)

    return patterns
